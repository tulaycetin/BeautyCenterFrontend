@namespace BeautyCenterFrontend.Components.Shared
@using Microsoft.AspNetCore.Components.Web

<div class="modal-overlay @(IsVisible ? "show" : "")" @onclick="OnBackdropClick" @onkeydown="OnKeyPress" tabindex="-1">
    <div class="modal-container @SizeClass" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h5 class="modal-title">
                @if (!string.IsNullOrEmpty(Icon))
                {
                    <i class="fas fa-@Icon me-2"></i>
                }
                @Title
            </h5>
            @if (ShowCloseButton)
            {
                <button type="button" class="modal-close-btn" @onclick="CloseModal">
                    <i class="fas fa-times"></i>
                </button>
            }
        </div>
        
        <div class="modal-body">
            @ChildContent
        </div>
        
        @if (FooterContent != null)
        {
            <div class="modal-footer">
                @FooterContent
            </div>
        }
    </div>
</div>

<style>
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
        opacity: 0;
        visibility: hidden;
        transition: all 0.3s ease;
        padding: 20px;
        box-sizing: border-box;
    }

    .modal-overlay.show {
        opacity: 1;
        visibility: visible;
    }

    .modal-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
        max-height: 90vh;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        transform: scale(0.9) translateY(-50px);
        transition: all 0.3s ease;
        width: 100%;
        max-width: 500px;
    }

    .modal-overlay.show .modal-container {
        transform: scale(1) translateY(0);
    }

    .modal-container.size-sm {
        max-width: 400px;
    }

    .modal-container.size-lg {
        max-width: 800px;
    }

    .modal-container.size-xl {
        max-width: 1200px;
    }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid #e9ecef;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        display: flex;
        justify-content: space-between;
        align-items: center;
        min-height: 60px;
    }

    .modal-title {
        margin: 0;
        font-size: 1.25rem;
        font-weight: 600;
    }

    .modal-close-btn {
        background: none;
        border: none;
        color: white;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 8px;
        border-radius: 6px;
        transition: background-color 0.2s ease;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-close-btn:hover {
        background-color: rgba(255, 255, 255, 0.1);
    }

    .modal-body {
        padding: 20px;
        overflow-y: auto;
        flex: 1;
    }

    .modal-footer {
        padding: 15px 20px;
        border-top: 1px solid #e9ecef;
        background-color: #f8f9fa;
        display: flex;
        justify-content: flex-end;
        gap: 10px;
    }

    /* Responsive */
    @@media (max-width: 768px) {
        .modal-overlay {
            padding: 10px;
        }

        .modal-container {
            max-height: 95vh;
            border-radius: 8px;
        }

        .modal-header {
            padding: 15px;
            min-height: 50px;
        }

        .modal-title {
            font-size: 1.1rem;
        }

        .modal-body {
            padding: 15px;
        }

        .modal-footer {
            padding: 12px 15px;
        }
    }

    /* Animation for mobile */
    @@media (max-width: 768px) {
        .modal-container {
            transform: scale(0.95) translateY(50px);
        }

        .modal-overlay.show .modal-container {
            transform: scale(1) translateY(0);
        }
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; } = false;
    [Parameter] public string Title { get; set; } = "";
    [Parameter] public string Icon { get; set; } = "";
    [Parameter] public string Size { get; set; } = "md"; // sm, md, lg, xl
    [Parameter] public bool ShowCloseButton { get; set; } = true;
    [Parameter] public bool CloseOnBackdropClick { get; set; } = true;
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? FooterContent { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }

    private string SizeClass => $"size-{Size}";

    private async Task CloseModal()
    {
        IsVisible = false;
        await OnClose.InvokeAsync();
        StateHasChanged();
    }

    private async Task OnBackdropClick()
    {
        if (CloseOnBackdropClick)
        {
            await CloseModal();
        }
    }

    private async Task OnKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Escape")
        {
            await CloseModal();
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (IsVisible && firstRender)
        {
            // Small delay to ensure modal is fully rendered
            await Task.Delay(100);
        }
    }
}