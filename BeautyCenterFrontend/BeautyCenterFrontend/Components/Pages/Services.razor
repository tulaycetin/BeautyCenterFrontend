@page "/services"
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@using BeautyCenterFrontend.Models
@using BeautyCenterFrontend.Services
@using BeautyCenterFrontend.Components.Shared
@using Microsoft.AspNetCore.Components.Authorization
@inject ServiceTypeService ServiceTypeService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider

<PageTitle>Hizmet Yönetimi - Güzellik Merkezi</PageTitle>

<div class="service-management">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="page-title">
                <i class="fas fa-spa me-2"></i>
                Hizmet Yönetimi
            </h1>
            <p class="text-muted">Hizmet türlerini görüntüle ve yönet</p>
        </div>
        <button class="btn btn-primary" @onclick="OpenAddServiceModal">
            <i class="fas fa-plus me-2"></i>
            Yeni Hizmet
        </button>
    </div>



    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="Hizmet ara..." 
                               value="@searchTerm" @oninput="OnSearchChanged">
                    </div>
                </div>
                <div class="col-md-6 text-end">
                    <div class="btn-group" role="group">
                        <button type="button" class="btn @(showActiveOnly ? "btn-primary" : "btn-outline-primary")" 
                                @onclick="() => ToggleActiveFilter()">
                            <i class="fas fa-check me-1"></i>
                            Aktif Hizmetler
                        </button>
                        <button type="button" class="btn @(!showActiveOnly ? "btn-primary" : "btn-outline-primary")" 
                                @onclick="() => ToggleActiveFilter()">
                            <i class="fas fa-list me-1"></i>
                            Tüm Hizmetler
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                </div>
            }
            else if (filteredServices.Any())
            {
                <div class="row">
                    @foreach (var service in filteredServices)
                    {
                        <div class="col-12 col-sm-6 col-lg-4 mb-4">
                            <div class="card h-100 shadow-sm service-card @(service.IsActive ? "" : "opacity-75")">
                                @if (!string.IsNullOrEmpty(service.ImageUrl))
                                {
                                    <div class="service-image-container">
                                        <img src="@service.ImageUrl" class="card-img-top service-image" alt="@service.Name" />
                                        <div class="service-image-overlay">
                                            <i class="fas fa-eye"></i>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="card-img-top bg-gradient service-image-container service-icon-container">
                                        <i class="fas fa-@GetServiceIcon(service.Name) text-white service-icon-main"></i>
                                    </div>
                                }
                                
                                <div class="card-body p-3">
                                    <div class="d-flex justify-content-between align-items-start mb-2">
                                        <h5 class="card-title mb-0">@service.Name</h5>
                                        <span class="badge bg-@(service.IsActive ? "success" : "danger")">
                                            @(service.IsActive ? "Aktif" : "Pasif")
                                        </span>
                                    </div>
                                    
                                    @if (!string.IsNullOrEmpty(service.Description))
                                    {
                                        <p class="card-text text-muted small text-truncate">@service.Description</p>
                                    }
                                    
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <div class="text-primary fw-bold fs-5">
                                            <i class="fas fa-lira-sign me-1"></i>
                                            @service.Price.ToString("N2")
                                        </div>
                                        <div class="text-muted small">
                                            <i class="fas fa-clock me-1"></i>
                                            @service.DurationText
                                        </div>
                                    </div>
                                    
                                    @if (service.CategoryName != null)
                                    {
                                        <div class="mb-2">
                                            <span class="badge bg-info">
                                                <i class="fas fa-tag me-1"></i>
                                                @service.CategoryName
                                            </span>
                                        </div>
                                    }
                                </div>
                                
                                <div class="card-footer bg-light p-2">
                                    <div class="btn-group w-100" role="group">
                                        <button type="button" class="btn btn-sm btn-outline-primary" 
                                                @onclick="() => OpenServiceDetailsModal(service.Id)">
                                            <i class="fas fa-eye"></i>
                                            <span class="d-none d-sm-inline ms-1">Detay</span>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-warning" 
                                                @onclick="() => OpenEditServiceModal(service)">
                                            <i class="fas fa-edit"></i>
                                            <span class="d-none d-sm-inline ms-1">Düzenle</span>
                                        </button>
                                        <button type="button" class="btn btn-sm btn-outline-@(service.IsActive ? "danger" : "success")" 
                                                @onclick="() => ToggleServiceStatus(service.Id, service.IsActive)">
                                            <i class="fas fa-@(service.IsActive ? "times" : "check")"></i>
                                            <span class="d-none d-sm-inline ms-1">@(service.IsActive ? "Pasif" : "Aktif")</span>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-spa fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Hizmet bulunamadı</h5>
                    <p class="text-muted">Arama kriterlerinizi değiştirin veya yeni hizmet ekleyin.</p>
                </div>
            }
        </div>
    </div>
</div>

@* Service Add/Edit Modal *@
<Modal IsVisible="@showServiceModal" 
       Title="@(isEditMode ? "Hizmet Düzenle" : "Yeni Hizmet Ekle")"
       Icon="spa"
       Size="md"
       OnClose="@CloseServiceModal">
    <ChildContent>
        <EditForm Model="@serviceModel" OnValidSubmit="@SaveService" FormName="ServiceModalForm" id="ServiceModalForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="row g-3">
                <div class="col-12 col-md-6 mb-3">
                    <label for="modalServiceName" class="form-label">Hizmet Adı *</label>
                    <InputText @ref="serviceNameInput" id="modalServiceName" class="form-control" @bind-Value="serviceModel.Name" placeholder="Hizmet adı giriniz" />
                    <ValidationMessage For="@(() => serviceModel.Name)" />
                </div>
                <div class="col-12 col-md-6 mb-3">
                    <label for="modalServicePrice" class="form-label">Fiyat (₺) *</label>
                    <InputNumber id="modalServicePrice" class="form-control" @bind-Value="serviceModel.Price" min="0.01" step="0.01" />
                    <ValidationMessage For="@(() => serviceModel.Price)" />
                </div>
            </div>
            <div class="row g-3">
                <div class="col-12 col-md-6 mb-3">
                    <label for="modalServiceDuration" class="form-label">Süre (dakika) *</label>
                    <InputNumber id="modalServiceDuration" class="form-control" @bind-Value="serviceModel.DurationMinutes" min="15" max="480" />
                    <ValidationMessage For="@(() => serviceModel.DurationMinutes)" />
                </div>
                <div class="col-12 col-md-6 mb-3">
                    <label for="modalServiceCategory" class="form-label">Kategori</label>
                    <InputText id="modalServiceCategory" class="form-control" @bind-Value="serviceModel.CategoryName" placeholder="Kategori (örn: Cilt Bakımı)" />
                </div>
            </div>
            <div class="mb-3">
                <label for="modalServiceImageUrl" class="form-label">
                    <i class="fas fa-image me-2"></i>Görsel URL
                </label>
                <div class="input-group">
                    <InputText id="modalServiceImageUrl" class="form-control" @bind-Value="serviceModel.ImageUrl" placeholder="https://example.com/image.jpg" />
                    @if (!string.IsNullOrEmpty(serviceModel.ImageUrl))
                    {
                        <button type="button" class="btn btn-outline-secondary" @onclick="() => PreviewImage(serviceModel.ImageUrl)">
                            <i class="fas fa-eye"></i>
                        </button>
                    }
                </div>
                <small class="text-muted">Görsel URL'si girin (JPG, PNG, WebP)</small>
                @if (!string.IsNullOrEmpty(serviceModel.ImageUrl))
                {
                    <div class="mt-2">
                        <img src="@serviceModel.ImageUrl" class="img-thumbnail" style="max-height: 150px;" alt="Önizleme" />
                    </div>
                }
            </div>
            <div class="mb-3">
                <label for="modalServiceDescription" class="form-label">Açıklama</label>
                <InputTextArea id="modalServiceDescription" class="form-control" rows="3" @bind-Value="serviceModel.Description" placeholder="Hizmet açıklaması" />
            </div>
            <div class="form-check mb-3">
                <InputCheckbox id="modalServiceIsActive" class="form-check-input" @bind-Value="serviceModel.IsActive" />
                <label class="form-check-label" for="modalServiceIsActive">
                    Aktif hizmet
                </label>
            </div>
        </EditForm>
    </ChildContent>
    <FooterContent>
        <button type="button" class="btn btn-secondary" @onclick="CloseServiceModal">
            <i class="fas fa-times me-1"></i>
            İptal
        </button>
        <button type="submit" form="ServiceModalForm" class="btn btn-success" disabled="@isSaving">
            @if (isSaving)
            {
                <span class="spinner-border spinner-border-sm me-2"></span>
            }
            <i class="fas fa-save me-1"></i>
            @(isEditMode ? "Güncelle" : "Kaydet")
        </button>
    </FooterContent>
</Modal>

@* Service Details Modal *@
<Modal IsVisible="@showServiceDetailsModal" 
       Title="Hizmet Detayları"
       Icon="spa"
       Size="lg"
       OnClose="@CloseServiceDetailsModal">
    <ChildContent>
        @if (selectedServiceDetails != null)
        {
            <div class="row g-3">
                <div class="col-12 col-md-4">
                    @if (!string.IsNullOrEmpty(selectedServiceDetails.ImageUrl))
                    {
                        <div class="d-flex justify-content-center">
                            <img src="@selectedServiceDetails.ImageUrl" class="rounded" style="width: 250px; height: 250px; object-fit: contain; border: 1px solid #dee2e6;" alt="@selectedServiceDetails.Name" />
                        </div>
                    }
                    else
                    {
                        <div class="d-flex justify-content-center">
                            <div class="bg-gradient rounded d-flex align-items-center justify-content-center" style="width: 250px; height: 250px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); border: 1px solid #dee2e6;">
                                <i class="fas fa-@GetServiceIcon(selectedServiceDetails.Name) text-white" style="font-size: 5rem;"></i>
                            </div>
                        </div>
                    }
                </div>
                
                <div class="col-12 col-md-8">
                    <div class="row g-3">
                        <div class="col-12">
                            <div class="card shadow-sm">
                                <div class="card-header bg-primary text-white py-2">
                                    <h6 class="card-title mb-0 small">
                                        <i class="fas fa-info-circle me-2"></i>
                                        Hizmet Bilgileri
                                    </h6>
                                </div>
                                <div class="card-body p-3">
                                    <div class="row mb-2">
                                        <div class="col-4"><small><strong>Hizmet Adı:</strong></small></div>
                                        <div class="col-8"><small>@selectedServiceDetails.Name</small></div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(selectedServiceDetails.CategoryName))
                                    {
                                        <div class="row mb-2">
                                            <div class="col-4"><small><strong>Kategori:</strong></small></div>
                                            <div class="col-8">
                                                <span class="badge bg-info">
                                                    <small>@selectedServiceDetails.CategoryName</small>
                                                </span>
                                            </div>
                                        </div>
                                    }
                                    <div class="row mb-2">
                                        <div class="col-4"><small><strong>Durum:</strong></small></div>
                                        <div class="col-8">
                                            <span class="badge bg-@(selectedServiceDetails.IsActive ? "success" : "danger")">
                                                <small>@(selectedServiceDetails.IsActive ? "Aktif" : "Pasif")</small>
                                            </span>
                                        </div>
                                    </div>
                                    @if (!string.IsNullOrEmpty(selectedServiceDetails.Description))
                                    {
                                        <div class="row mb-2">
                                            <div class="col-4"><small><strong>Açıklama:</strong></small></div>
                                            <div class="col-8"><small>@selectedServiceDetails.Description</small></div>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-12">
                            <div class="card shadow-sm">
                                <div class="card-header bg-success text-white py-2">
                                    <h6 class="card-title mb-0 small">
                                        <i class="fas fa-chart-bar me-2"></i>
                                        Fiyat ve Süre
                                    </h6>
                                </div>
                                <div class="card-body p-3">
                                    <div class="row mb-2">
                                        <div class="col-4"><small><strong>Fiyat:</strong></small></div>
                                        <div class="col-8">
                                            <span class="fw-bold text-success">
                                                <small><i class="fas fa-lira-sign me-1"></i>@selectedServiceDetails.Price.ToString("N2")</small>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-4"><small><strong>Süre:</strong></small></div>
                                        <div class="col-8">
                                            <span class="fw-bold text-info">
                                                <small><i class="fas fa-clock me-1"></i>@selectedServiceDetails.DurationMinutes dk</small>
                                            </span>
                                        </div>
                                    </div>
                                    <div class="row mb-2">
                                        <div class="col-4"><small><strong>ID:</strong></small></div>
                                        <div class="col-8">
                                            <span class="badge bg-secondary">
                                                <small>#@selectedServiceDetails.Id</small>
                                            </span>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </ChildContent>
    <FooterContent>
        <div class="d-flex flex-wrap gap-2 w-100">
            <button type="button" class="btn btn-sm btn-secondary" @onclick="CloseServiceDetailsModal">
                <i class="fas fa-times me-1"></i>
                <small>Kapat</small>
            </button>
            @if (selectedServiceDetails != null)
            {
                <button type="button" class="btn btn-sm btn-warning" @onclick="() => OpenEditServiceModal(selectedServiceDetails)">
                    <i class="fas fa-edit me-1"></i>
                    <small>Düzenle</small>
                </button>
                <button type="button" class="btn btn-sm btn-@(selectedServiceDetails.IsActive ? "danger" : "success")" 
                        @onclick="() => ToggleServiceStatus(selectedServiceDetails.Id, selectedServiceDetails.IsActive)">
                    <i class="fas fa-@(selectedServiceDetails.IsActive ? "times" : "check") me-1"></i>
                    <small>@(selectedServiceDetails.IsActive ? "Pasif" : "Aktif")</small>
                </button>
            }
        </div>
    </FooterContent>
</Modal>

<style>
    .page-title {
        color: #667eea;
        font-weight: 600;
        margin-bottom: 0;
    }

    .card {
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .card-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-bottom: none;
        border-radius: 10px 10px 0 0;
    }

    .service-card {
        background: white;
        border-radius: 15px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
        height: 100%;
        display: flex;
        flex-direction: column;
        overflow: hidden;
        border: none;
    }

    .service-card:hover {
        transform: translateY(-8px);
        box-shadow: 0 8px 25px rgba(102, 126, 234, 0.25);
    }

    .service-image-container {
        position: relative;
        height: 180px;
        overflow: hidden;
    }

    .service-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        transition: transform 0.3s ease;
    }

    .service-card:hover .service-image {
        transform: scale(1.05);
    }

    .service-image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(102, 126, 234, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
        color: white;
        font-size: 2rem;
    }

    .service-card:hover .service-image-overlay {
        opacity: 1;
    }

    .service-card.inactive {
        opacity: 0.7;
        background: #f8f9fa;
    }

    .service-header {
        position: relative;
        padding: 20px;
        text-align: center;
        border-bottom: 1px solid #f0f0f0;
    }

    .service-icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto;
        color: white;
        font-size: 24px;
    }

    .service-status {
        position: absolute;
        top: 10px;
        right: 10px;
    }

    .service-content {
        padding: 20px;
        flex: 1;
    }

    .service-name {
        color: #333;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .service-description {
        color: #666;
        font-size: 14px;
        margin-bottom: 15px;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .service-details {
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        align-items: center;
        margin-bottom: 8px;
        color: #666;
        font-size: 14px;
    }

    .service-actions {
        padding: 15px;
        border-top: 1px solid #f0f0f0;
        display: flex;
        gap: 5px;
        justify-content: center;
    }

    .service-card .btn {
        transition: all 0.3s ease;
        border-radius: 8px;
    }

    .service-card .btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .service-card .card-footer {
        background: transparent;
        border-top: 1px solid rgba(0, 0, 0, 0.05);
    }

    .service-icon-container {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

    .service-card:hover .service-icon-container {
        background: linear-gradient(135deg, #5a6fd8 0%, #6a4c93 100%);
    }

    .service-icon-main {
        font-size: 3rem;
        transition: transform 0.3s ease;
    }

    .service-card:hover .service-icon-main {
        transform: scale(1.1);
    }

    .service-icon-large {
        font-size: 48px;
    }

    .text-justify {
        text-align: justify;
    }
</style>

@code {
    private List<ServiceTypeModel> services = new();
    private List<ServiceTypeModel> filteredServices = new();
    private bool isLoading = true;
    private string searchTerm = "";
    private bool showActiveOnly = true;
    
    // Form variables
    private ServiceCreateRequest serviceModel = new();
    private bool isEditMode = false;
    private bool isSaving = false;
    private bool showServiceModal = false;
    private InputText? serviceNameInput;

    // Details variables
    private ServiceTypeModel? selectedServiceDetails;
    private int selectedServiceId = 0;
    private bool showServiceDetailsModal = false;

    private bool authChecked = false;

    protected override async Task OnInitializedAsync()
    {
        // Skip auth check in OnInitialized - will be done in OnAfterRender
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !authChecked)
        {
            authChecked = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                Navigation.NavigateTo("/login");
                return;
            }
            await LoadServices();
            StateHasChanged();
        }
    }

    private async Task LoadServices()
    {
        try
        {
            isLoading = true;
            services = await ServiceTypeService.GetAllServiceTypesAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "Hizmetler yüklenirken bir hata oluştu.", "danger");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredServices = services.Where(s => 
            (showActiveOnly ? s.IsActive : true) &&
            (string.IsNullOrEmpty(searchTerm) || 
             s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
             (s.Description != null && s.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
             (s.CategoryName != null && s.CategoryName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
        ).ToList();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
        await Task.CompletedTask;
    }

    private async Task ToggleActiveFilter()
    {
        showActiveOnly = !showActiveOnly;
        ApplyFilters();
        await Task.CompletedTask;
    }

    private async Task OpenAddServiceModal()
    {
        isEditMode = false;
        serviceModel = new ServiceCreateRequest 
        { 
            IsActive = true,
            Price = 0,
            DurationMinutes = 60
        };
        showServiceModal = true;
        
        StateHasChanged();
        await Task.Delay(100);
        if (serviceNameInput?.Element != null)
        {
            await serviceNameInput.Element.Value.FocusAsync();
        }
    }

    private void CloseServiceModal()
    {
        showServiceModal = false;
        isEditMode = false;
        serviceModel = new ServiceCreateRequest();
    }

    private async Task PreviewImage(string? imageUrl)
    {
        if (!string.IsNullOrEmpty(imageUrl))
        {
            await JSRuntime.InvokeVoidAsync("window.open", imageUrl, "_blank");
        }
    }

    private async Task OpenServiceDetailsModal(int serviceId)
    {
        try
        {
            selectedServiceDetails = await ServiceTypeService.GetServiceTypeByIdAsync(serviceId);
            if (selectedServiceDetails != null)
            {
                showServiceDetailsModal = true;
                StateHasChanged();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "Hizmet detayları yüklenemedi.", "danger");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "Hizmet detayları yüklenirken bir hata oluştu.", "danger");
        }
    }

    private void CloseServiceDetailsModal()
    {
        showServiceDetailsModal = false;
        selectedServiceDetails = null;
    }

    private async Task OpenEditServiceModal(ServiceTypeModel service)
    {
        try
        {
            if (service == null)
            {
                await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "Hizmet bilgisi bulunamadı.", "danger");
                return;
            }

            // Close details modal if open
            showServiceDetailsModal = false;
            
            // Set edit mode and model
            isEditMode = true;
            selectedServiceId = service.Id;
            serviceModel = new ServiceCreateRequest
            {
                Id = service.Id,
                Name = service.Name ?? string.Empty,
                Description = service.Description ?? string.Empty,
                Price = service.Price,
                DurationMinutes = service.DurationMinutes,
                CategoryName = service.CategoryName ?? string.Empty,
                ImageUrl = service.ImageUrl,
                IsActive = service.IsActive
            };
            
            // Show edit modal
            showServiceModal = true;
            StateHasChanged();
            
            // Focus first input after render
            await Task.Delay(100);
            if (serviceNameInput?.Element != null)
            {
                await serviceNameInput.Element.Value.FocusAsync();
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "Hizmet düzenleme sırasında bir hata oluştu.", "danger");
        }
    }

    private async Task SaveService()
    {
        try
        {
            isSaving = true;
            
            // Add console logging for debugging
            await JSRuntime.InvokeVoidAsync("console.log", $"SaveService called. IsEditMode: {isEditMode}");
            await JSRuntime.InvokeVoidAsync("console.log", $"Service model: Name='{serviceModel.Name}', Price={serviceModel.Price}, Duration={serviceModel.DurationMinutes}");
            
            if (isEditMode)
            {
                await JSRuntime.InvokeVoidAsync("console.log", $"Updating service with ID: {selectedServiceId}");
                
                var updateModel = new UpdateServiceTypeModel
                {
                    Name = serviceModel.Name,
                    Description = serviceModel.Description,
                    Price = serviceModel.Price,
                    DurationMinutes = serviceModel.DurationMinutes,
                    ImageUrl = serviceModel.ImageUrl,
                    IsActive = serviceModel.IsActive
                };
                
                await JSRuntime.InvokeVoidAsync("console.log", "Calling UpdateServiceTypeAsync...");
                var success = await ServiceTypeService.UpdateServiceTypeAsync(selectedServiceId, updateModel);
                await JSRuntime.InvokeVoidAsync("console.log", $"Update result: {success}");
                
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Başarılı!", "Hizmet başarıyla güncellendi.", "success");
                    showServiceModal = false;
                    isEditMode = false;
                    await LoadServices();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "Hizmet güncellenirken bir hata oluştu.", "danger");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("console.log", "Creating new service...");
                
                var createModel = new CreateServiceTypeModel
                {
                    Name = serviceModel.Name,
                    Description = serviceModel.Description,
                    Price = serviceModel.Price,
                    DurationMinutes = serviceModel.DurationMinutes,
                    ImageUrl = serviceModel.ImageUrl,
                    IsActive = serviceModel.IsActive
                };
                
                await JSRuntime.InvokeVoidAsync("console.log", "Calling CreateServiceTypeAsync...");
                var success = await ServiceTypeService.CreateServiceTypeAsync(createModel);
                await JSRuntime.InvokeVoidAsync("console.log", $"Create result: {success}");
                
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Başarılı!", "Hizmet başarıyla eklendi.", "success");
                    showServiceModal = false;
                    isEditMode = false;
                    serviceModel = new ServiceCreateRequest();
                    await LoadServices();
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "Hizmet eklenirken bir hata oluştu.", "danger");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"SaveService exception: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("showToast", "Hata!", $"İşlem sırasında bir hata oluştu: {ex.Message}", "danger");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ToggleServiceStatus(int serviceId, bool currentStatus)
    {
        try
        {
            var service = services.FirstOrDefault(s => s.Id == serviceId);
            if (service != null)
            {
                service.IsActive = !currentStatus;
                var updateModel = new UpdateServiceTypeModel
                {
                    Name = service.Name,
                    Description = service.Description,
                    Price = service.Price,
                    DurationMinutes = service.DurationMinutes,
                    ImageUrl = service.ImageUrl,
                    IsActive = !currentStatus
                };

                var success = await ServiceTypeService.UpdateServiceTypeAsync(serviceId, updateModel);
                if (success)
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Başarılı!", 
                        $"Hizmet {(!currentStatus ? "aktifleştirildi" : "pasifleştirildi")}.", "success");
                    await LoadServices();
                    
                    // Update details if open
                    if (showServiceDetailsModal && selectedServiceDetails?.Id == serviceId)
                    {
                        selectedServiceDetails.IsActive = !currentStatus;
                        StateHasChanged();
                    }
                }
                else
                {
                    await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "Durum güncellenirken bir hata oluştu.", "danger");
                }
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showToast", "Hata!", "İşlem sırasında bir hata oluştu.", "danger");
        }
    }

    private string GetServiceIcon(string serviceName)
    {
        if (string.IsNullOrEmpty(serviceName))
            return "spa";

        var lowerName = serviceName.ToLowerInvariant();
        
        if (lowerName.Contains("saç") || lowerName.Contains("sac"))
            return "cut";
        else if (lowerName.Contains("manikür") || lowerName.Contains("manikur") || lowerName.Contains("tırnak"))
            return "hand-sparkles";
        else if (lowerName.Contains("pedikür") || lowerName.Contains("pedikur"))
            return "shoe-prints";
        else if (lowerName.Contains("cilt") || lowerName.Contains("yüz") || lowerName.Contains("yuz"))
            return "face-smile";
        else if (lowerName.Contains("masaj"))
            return "hands";
        else if (lowerName.Contains("epilasyon") || lowerName.Contains("lazer"))
            return "bolt";
        else if (lowerName.Contains("makyaj") || lowerName.Contains("makeup"))
            return "palette";
        else if (lowerName.Contains("kaş") || lowerName.Contains("kas"))
            return "eye";
        else if (lowerName.Contains("kirpik"))
            return "eye";
        else
            return "spa";
    }
}