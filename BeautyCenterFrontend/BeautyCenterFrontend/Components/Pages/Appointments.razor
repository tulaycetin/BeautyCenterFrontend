@page "/appointments"
@rendermode InteractiveServer
@using BeautyCenterFrontend.Models
@using BeautyCenterFrontend.Services
@using BeautyCenterFrontend.Components.Shared
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.JSInterop
@inject AppointmentService AppointmentService
@inject CustomerService CustomerService
@inject ServiceTypeService ServiceTypeService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider
@implements IDisposable

<PageTitle>Randevu Yönetimi - Güzellik Merkezi</PageTitle>

<div class="appointment-management">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="page-title">
                <i class="fas fa-calendar-alt me-2"></i>
                Randevu Yönetimi
            </h1>
            <p class="text-muted">Randevuları görüntüle ve yönet</p>
        </div>
        <button class="btn btn-primary" @onclick="OpenAddAppointmentModal">
            <i class="fas fa-plus me-2"></i>
            Yeni Randevu
        </button>
    </div>



    <div class="card">
        <div class="card-header">
            <div class="row align-items-center">
                <div class="col-md-4">
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input type="text" class="form-control" placeholder="Randevu ara..." 
                               value="@searchTerm" @oninput="OnSearchChanged">
                    </div>
                </div>
                <div class="col-md-4">
                    <select class="form-select" value="@selectedStatus" @onchange="OnStatusChanged">
                        <option value="">Tüm Durumlar</option>
                        <option value="Scheduled">Planlanmış</option>
                        <option value="Completed">Tamamlanmış</option>
                        <option value="Cancelled">İptal Edilmiş</option>
                        <option value="NoShow">Gelmedi</option>
                    </select>
                </div>
                <div class="col-md-4">
                    <div class="btn-group w-100" role="group">
                        <button type="button" class="btn @(viewMode == "today" ? "btn-primary" : "btn-outline-primary")" 
                                @onclick="@(() => SetViewMode("today"))">
                            <i class="fas fa-calendar-day me-1"></i>
                            Bugün
                        </button>
                        <button type="button" class="btn @(viewMode == "week" ? "btn-primary" : "btn-outline-primary")" 
                                @onclick="@(() => SetViewMode("week"))">
                            <i class="fas fa-calendar-week me-1"></i>
                            Bu Hafta
                        </button>
                        <button type="button" class="btn @(viewMode == "all" ? "btn-primary" : "btn-outline-primary")" 
                                @onclick="@(() => SetViewMode("all"))">
                            <i class="fas fa-calendar me-1"></i>
                            Tümü
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-body">
            @if (isLoading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                </div>
            }
            else if (filteredAppointments.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Tarih & Saat</th>
                                <th>Müşteri</th>
                                <th>Hizmet</th>
                                <th>Süre</th>
                                <th>Fiyat</th>
                                <th>Durum</th>
                                <th>İşlemler</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var appointment in filteredAppointments)
                            {
                                <tr class="appointment-row @(appointment.Status == "Completed" ? "completed" : appointment.Status == "Cancelled" ? "cancelled" : "")">
                                    <td>
                                        <div class="appointment-time">
                                            <div class="fw-bold">@appointment.AppointmentDate.ToString("dd.MM.yyyy")</div>
                                            <small class="text-muted">@appointment.AppointmentDate.ToString("HH:mm")</small>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="d-flex align-items-center">
                                            <div class="avatar-circle me-3">
                                                @if (!string.IsNullOrEmpty(appointment.CustomerName))
                                                {
                                                    var names = appointment.CustomerName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
                                                    @if (names.Length > 1 && names[0].Length > 0 && names[1].Length > 0)
                                                    {
                                                        @names[0][0]@names[1][0]
                                                    }
                                                    else if (names.Length > 0 && names[0].Length > 0)
                                                    {
                                                        @names[0][0]
                                                    }
                                                }
                                            </div>
                                            <div>
                                                <div class="fw-bold">@appointment.CustomerName</div>
                                                @if (!string.IsNullOrEmpty(appointment.Notes))
                                                {
                                                    <small class="text-muted">@appointment.Notes</small>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                    <td>
                                        <div class="service-info">
                                            <div class="fw-bold">@appointment.ServiceTypeName</div>
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-info">@appointment.Duration dk</span>
                                    </td>
                                    <td>
                                        <div class="price-info">
                                            @if (appointment.DiscountAmount > 0)
                                            {
                                                <div class="text-muted text-decoration-line-through">₺@appointment.ServicePrice.ToString("N2")</div>
                                                <div class="fw-bold text-success">₺@appointment.FinalPrice.ToString("N2")</div>
                                            }
                                            else
                                            {
                                                <div class="fw-bold">₺@appointment.FinalPrice.ToString("N2")</div>
                                            }
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(GetAppointmentStatusColor(appointment.Status))">
                                            @appointment.StatusText
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-outline-primary" 
                                                    @onclick="() => OpenAppointmentDetailsModal(appointment.Id)">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-warning" 
                                                    @onclick="() => OpenEditAppointmentModal(appointment)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            @if (appointment.Status == "Scheduled")
                                            {
                                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                                        @onclick='() => UpdateAppointmentStatus(appointment.Id, "Cancelled")'>
                                                    <i class="fas fa-ban"></i>
                                                </button>
                                            }
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-calendar-alt fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">Randevu bulunamadı</h5>
                    <p class="text-muted">Arama kriterlerinizi değiştirin veya yeni randevu ekleyin.</p>
                </div>
            }
        </div>
    </div>
</div>

@* Appointment Add/Edit Modal *@
<Modal IsVisible="@showAppointmentModal" 
       Title="@(isEditMode ? "Randevu Düzenle" : "Yeni Randevu Oluştur")"
       Icon="calendar-plus"
       Size="lg"
       OnClose="@CloseAppointmentModal">
    <ChildContent>
        <EditForm Model="@appointmentModel" OnValidSubmit="@SaveAppointment" FormName="AppointmentModalForm">
            <DataAnnotationsValidator />
            
            @* Header Info Panel *@
            <div class="alert alert-info border-0 mb-4" style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white;">
                <div class="d-flex align-items-center">
                    <i class="fas fa-info-circle fa-2x me-3"></i>
                    <div>
                        <h6 class="mb-1 fw-bold">Randevu Bilgileri</h6>
                        <small>Tüm zorunlu alanları doldurarak randevu oluşturun</small>
                    </div>
                </div>
            </div>

            @* Customer & Service Selection *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="modalCustomerId" class="form-label fw-bold">
                        <i class="fas fa-user me-2 text-primary"></i>Müşteri Seçimi *
                    </label>
                    <InputSelect id="modalCustomerId" class="form-select form-select-lg" @bind-Value="appointmentModel.CustomerId">
                        <option value="0" class="text-muted">-- Müşteri seçiniz --</option>
                        @foreach (var customer in customers)
                        {
                            <option value="@customer.Id">
                                👤 @customer.FullName - 📞 @customer.Phone
                            </option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => appointmentModel.CustomerId)" class="text-danger small mt-1" />
                    @if (customers.Count == 0)
                    {
                        <small class="text-warning">
                            <i class="fas fa-exclamation-triangle me-1"></i>Henüz müşteri eklenmemiş
                        </small>
                    }
                </div>
                <div class="col-md-6 mb-3">
                    <label for="modalServiceTypeId" class="form-label fw-bold">
                        <i class="fas fa-spa me-2 text-success"></i>Hizmet Seçimi *
                    </label>
                    <InputSelect id="modalServiceTypeId" class="form-select form-select-lg" Value="appointmentModel.ServiceTypeId" ValueChanged="@((int value) => OnServiceSelected(value))" ValueExpression="@(() => appointmentModel.ServiceTypeId)">
                        <option value="0" class="text-muted">-- Hizmet seçiniz --</option>
                        @foreach (var service in services)
                        {
                            <option value="@service.Id">
                                ✨ @service.Name - ₺@service.Price.ToString("N2") (@service.DurationMinutes dk)
                            </option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => appointmentModel.ServiceTypeId)" class="text-danger small mt-1" />
                    @if (services.Count == 0)
                    {
                        <small class="text-warning">
                            <i class="fas fa-exclamation-triangle me-1"></i>Henüz hizmet eklenmemiş
                        </small>
                    }
                </div>
            </div>

            @* Date & Time Selection *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="modalAppointmentDate" class="form-label fw-bold">
                        <i class="fas fa-calendar-day me-2 text-info"></i>Randevu Tarihi *
                    </label>
                    <InputDate id="modalAppointmentDate" class="form-control form-control-lg" @bind-Value="appointmentDateValue" min="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    <ValidationMessage For="@(() => appointmentModel.AppointmentDateString)" class="text-danger small mt-1" />
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>Bugün: @DateTime.Today.ToString("dd.MM.yyyy")
                    </small>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="modalAppointmentTime" class="form-label fw-bold">
                        <i class="fas fa-clock me-2 text-warning"></i>Randevu Saati *
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">
                            <i class="fas fa-clock text-warning"></i>
                        </span>
                        <InputText id="modalAppointmentTime" class="form-control form-control-lg" @bind-Value="appointmentModel.AppointmentTimeString" placeholder="Örn: 14:30" />
                    </div>
                    <ValidationMessage For="@(() => appointmentModel.AppointmentTimeString)" class="text-danger small mt-1" />
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>Format: SS:DD (örn: 14:30)
                    </small>
                    
                    @* Quick Time Selection *@
                    <div class="mt-2">
                        <small class="text-muted mb-2 d-block">Hızlı Saat Seçimi:</small>
                        <div class="d-flex flex-wrap gap-1">
                            @foreach (var timeSlot in GetSuggestedTimeSlots())
                            {
                                <button type="button" class="btn btn-sm @(appointmentModel.AppointmentTimeString == timeSlot ? "btn-primary" : "btn-outline-primary")" 
                                        @onclick="() => SetQuickTime(timeSlot)">
                                    @timeSlot
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>

            @* Duration & Price *@
            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="modalDuration" class="form-label fw-bold">
                        <i class="fas fa-hourglass-half me-2 text-primary"></i>Süre (Dakika)
                    </label>
                    <div class="input-group">
                        <InputNumber id="modalDuration" class="form-control form-control-lg" @bind-Value="appointmentModel.Duration" min="15" max="480" />
                        <span class="input-group-text">dakika</span>
                    </div>
                    <ValidationMessage For="@(() => appointmentModel.Duration)" class="text-danger small mt-1" />
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>Otomatik hizmet seçimine göre ayarlanır
                    </small>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="modalPrice" class="form-label fw-bold">
                        <i class="fas fa-lira-sign me-2 text-success"></i>Hizmet Ücreti
                    </label>
                    <div class="input-group">
                        <span class="input-group-text">₺</span>
                        <InputNumber id="modalPrice" class="form-control form-control-lg" @bind-Value="appointmentModel.Price" min="0" step="0.01" />
                    </div>
                    <ValidationMessage For="@(() => appointmentModel.Price)" class="text-danger small mt-1" />
                    <small class="text-muted">
                        <i class="fas fa-info-circle me-1"></i>Otomatik hizmet seçimine göre ayarlanır
                    </small>
                </div>
            </div>

            @* Advanced Options *@
            <div class="card mb-3" style="border: 1px solid #e3f2fd;">
                <div class="card-header" style="background: #e3f2fd; border-bottom: 1px solid #bbdefb;">
                    <h6 class="mb-0 text-primary">
                        <i class="fas fa-cog me-2"></i>Gelişmiş Seçenekler
                    </h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-6 mb-3">
                            <label for="modalDiscountAmount" class="form-label fw-bold">
                                <i class="fas fa-percentage me-2 text-danger"></i>İndirim 
                            </label>
                            <div class="input-group">
                                <span class="input-group-text">₺</span>
                                <InputNumber id="modalDiscountAmount" class="form-control" @bind-Value="appointmentModel.DiscountAmount" min="0" step="0.01" placeholder="0.00" />
                            </div>
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>İndirim uygulayacaksanız tutarı girin
                            </small>
                        </div>
                        <div class="col-md-6 mb-3">
                            <label for="modalSessions" class="form-label fw-bold">
                                <i class="fas fa-repeat me-2 text-info"></i>Seans Sayısı
                            </label>
                            <div class="input-group">
                                <InputNumber id="modalSessions" class="form-control" @bind-Value="appointmentModel.SessionsTotal" min="1" placeholder="1" />
                                <span class="input-group-text">seans</span>
                            </div>
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>Çoklu seans için toplam sayı
                            </small>
                        </div>
                    </div>
                </div>
            </div>

            @* Notes Section *@
            <div class="mb-3">
                <label for="modalNotes" class="form-label fw-bold">
                    <i class="fas fa-sticky-note me-2 text-secondary"></i>Ek Notlar
                </label>
                <InputTextArea id="modalNotes" class="form-control" rows="3" @bind-Value="appointmentModel.Notes" 
                               placeholder="Randevu ile ilgili özel notlar, hastaı genel durumu, alçerik bilgileri vb. yazabilirsiniz..." 
                               style="resize: vertical;" />
                <small class="text-muted">
                    <i class="fas fa-info-circle me-1"></i>Bu notlar randevu detaylarında görüntülenecektir (isteğe bağlı)
                </small>
            </div>

            @* Final Price Preview *@
            @if (appointmentModel.Price > 0)
            {
                <div class="alert alert-success border-0 mb-0">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h6 class="mb-1">
                                <i class="fas fa-calculator me-2"></i>Fiyat Özeti
                            </h6>
                            <div class="d-flex justify-content-between">
                                <span>Hizmet Ücreti:</span>
                                <span>₺@appointmentModel.Price.ToString("N2")</span>
                            </div>
                            @if (appointmentModel.DiscountAmount > 0)
                            {
                                <div class="d-flex justify-content-between text-danger">
                                    <span>İndirim:</span>
                                    <span>-₺@appointmentModel.DiscountAmount.Value.ToString("N2")</span>
                                </div>
                            }
                            <hr class="my-2">
                            <div class="d-flex justify-content-between fw-bold fs-5">
                                <span>Toplam:</span>
                                <span class="text-success">₺@((appointmentModel.Price - (appointmentModel.DiscountAmount ?? 0)).ToString("N2"))</span>
                            </div>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="text-success">
                                <i class="fas fa-check-circle fa-3x"></i>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </EditForm>
    </ChildContent>
    <FooterContent>
        <div class="d-flex justify-content-between align-items-center w-100">
            <div>
                @if (appointmentModel.CustomerId > 0 && appointmentModel.ServiceTypeId > 0)
                {
                    <small class="text-success">
                        <i class="fas fa-check-circle me-1"></i>
                        Gerekli alanlar tamamlandı
                    </small>
                }
                else
                {
                    <small class="text-warning">
                        <i class="fas fa-exclamation-triangle me-1"></i>
                        Müşteri ve Hizmet seçimi zorunlu
                    </small>
                }
            </div>
            <div class="d-flex gap-2">
                <button type="button" class="btn btn-outline-secondary btn-lg" @onclick="CloseAppointmentModal">
                    <i class="fas fa-times me-2"></i>
                    İptal Et
                </button>
                <button type="button" class="btn btn-success btn-lg shadow" @onclick="SaveAppointment" 
                        disabled="@(isSaving || appointmentModel.CustomerId == 0 || appointmentModel.ServiceTypeId == 0)">
                    @if (isSaving)
                    {
                        <span class="spinner-border spinner-border-sm me-2"></span>
                        <span>Kaydediliyor...</span>
                    }
                    else
                    {
                        <i class="fas fa-@(isEditMode ? "edit" : "plus-circle") me-2"></i>
                        <span>@(isEditMode ? "Randevuyu Güncelle" : "Randevu Oluştur")</span>
                    }
                </button>
            </div>
        </div>
    </FooterContent>
</Modal>

@* Appointment Details Modal *@
<Modal IsVisible="@showAppointmentDetailsModal" 
       Title="Randevu Detayları"
       Icon="calendar-alt"
       Size="lg"
       OnClose="@CloseAppointmentDetailsModal">
    <ChildContent>
        @if (selectedAppointmentDetails != null)
        {
            <div class="row g-3">
                <div class="col-12 col-md-6">
                    <div class="card h-100 shadow-sm">
                        <div class="card-header bg-primary text-white py-2">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-info-circle me-2"></i>
                                Randevu Bilgileri
                            </h6>
                        </div>
                        <div class="card-body p-3">
                            <div class="row mb-3">
                                <div class="col-sm-4"><strong>Randevu ID:</strong></div>
                                <div class="col-sm-8">
                                    <span class="badge bg-secondary">#@selectedAppointmentDetails.Id</span>
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4"><strong>Tarih & Saat:</strong></div>
                                <div class="col-sm-8">
                                    <i class="fas fa-calendar-day me-1"></i>
                                    @selectedAppointmentDetails.AppointmentDate.ToString("dd.MM.yyyy HH:mm")
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4"><strong>Müşteri:</strong></div>
                                <div class="col-sm-8">
                                    <i class="fas fa-user me-1"></i>
                                    @selectedAppointmentDetails.CustomerName
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4"><strong>Hizmet:</strong></div>
                                <div class="col-sm-8">
                                    <i class="fas fa-spa me-1"></i>
                                    @selectedAppointmentDetails.ServiceTypeName
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4"><strong>Süre:</strong></div>
                                <div class="col-sm-8">
                                    <i class="fas fa-clock me-1"></i>
                                    @selectedAppointmentDetails.Duration dakika
                                </div>
                            </div>
                            <div class="row mb-3">
                                <div class="col-sm-4"><strong>Durum:</strong></div>
                                <div class="col-sm-8">
                                    <span class="badge bg-@(GetAppointmentStatusColor(selectedAppointmentDetails.Status))">
                                        @selectedAppointmentDetails.StatusText
                                    </span>
                                </div>
                            </div>
                            @if (!string.IsNullOrEmpty(selectedAppointmentDetails.Notes))
                            {
                                <div class="row mb-3">
                                    <div class="col-sm-4"><strong>Notlar:</strong></div>
                                    <div class="col-sm-8">@selectedAppointmentDetails.Notes</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header">
                            <h6 class="card-title mb-0">
                                <i class="fas fa-lira-sign me-2"></i>
                                Fiyat Bilgileri
                            </h6>
                        </div>
                        <div class="card-body p-3">
                            <div class="row mb-2">
                                <div class="col-5"><small><strong>Hizmet Ücreti:</strong></small></div>
                                <div class="col-7"><small>₺@selectedAppointmentDetails.ServicePrice.ToString("N2")</small></div>
                            </div>
                            @if (selectedAppointmentDetails.DiscountAmount > 0)
                            {
                                <div class="row mb-2">
                                    <div class="col-5"><small><strong>İndirim:</strong></small></div>
                                    <div class="col-7 text-danger"><small>-₺@selectedAppointmentDetails.DiscountAmount?.ToString("N2")</small></div>
                                </div>
                            }
                            <div class="row mb-2">
                                <div class="col-5"><small><strong>Final Tutar:</strong></small></div>
                                <div class="col-7">
                                    <span class="fw-bold text-success">₺@selectedAppointmentDetails.FinalPrice.ToString("N2")</span>
                                </div>
                            </div>
                        </div>
                    </div>

                    @if (selectedAppointmentDetails?.Status == "Scheduled")
                    {
                        <div class="card mt-2 shadow-sm">
                            <div class="card-header bg-warning text-dark py-2">
                                <h6 class="card-title mb-0 small">
                                    <i class="fas fa-tools me-2"></i>
                                    Hızlı İşlemler
                                </h6>
                            </div>
                            <div class="card-body p-2">
                                <div class="d-grid gap-2">
                                    <button type="button" class="btn btn-sm btn-success" 
                                            @onclick='() => UpdateAppointmentStatus(selectedAppointmentDetails.Id, "Completed")'>
                                        <i class="fas fa-check me-1"></i>
                                        <small>Tamamlandı</small>
                                    </button>
                                    <button type="button" class="btn btn-sm btn-warning" 
                                            @onclick='() => UpdateAppointmentStatus(selectedAppointmentDetails.Id, "NoShow")'>
                                        <i class="fas fa-user-times me-1"></i>
                                        <small>Gelmedi</small>
                                    </button>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        }
    </ChildContent>
    <FooterContent>
        <button type="button" class="btn btn-secondary" @onclick="CloseAppointmentDetailsModal">
            <i class="fas fa-times me-1"></i>
            Kapat
        </button>
        @if (selectedAppointmentDetails != null)
        {
            <button type="button" class="btn btn-warning" @onclick="() => OpenEditAppointmentModal(selectedAppointmentDetails)">
                <i class="fas fa-edit me-1"></i>
                Düzenle
            </button>
            @if (selectedAppointmentDetails.Status == "Scheduled")
            {
                <button type="button" class="btn btn-danger" 
                        @onclick='() => UpdateAppointmentStatus(selectedAppointmentDetails.Id, "Cancelled")'>
                    <i class="fas fa-ban me-1"></i>
                    İptal Et
                </button>
            }
        }
    </FooterContent>
</Modal>

<style>
    .page-title {
        color: #667eea;
        font-weight: 600;
        margin-bottom: 0;
    }

    .card {
        border: none;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        border-radius: 10px;
    }

    .card-header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-bottom: none;
        border-radius: 10px 10px 0 0;
    }

    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 14px;
    }

    .table th {
        border-top: none;
        border-bottom: 2px solid #dee2e6;
        color: #495057;
        font-weight: 600;
    }

    .table-hover tbody tr:hover {
        background-color: rgba(102, 126, 234, 0.1);
    }

    .appointment-row.completed {
        opacity: 0.8;
    }

    .appointment-row.cancelled {
        opacity: 0.6;
        text-decoration: line-through;
    }

    .btn-group .btn {
        border-radius: 4px;
        margin-right: 2px;
    }

    .btn-group .btn:last-child {
        margin-right: 0;
    }
</style>

@code {
    private List<AppointmentModel> appointments = new();
    private List<AppointmentModel> filteredAppointments = new();
    private List<CustomerModel> customers = new();
    private List<ServiceTypeModel> services = new();
    private bool isLoading = true;
    private string searchTerm = "";
    private string selectedStatus = "";
    private string viewMode = "today";
    
    // Form variables
    private AppointmentCreateRequest appointmentModel = new();
    private bool isEditMode = false;
    private bool isSaving = false;
    private bool showAppointmentModal = false;
    private DateTime appointmentDateValue = DateTime.Today;

    // Details variables
    private AppointmentModel? selectedAppointmentDetails;
    private int selectedAppointmentId = 0;
    private bool showAppointmentDetailsModal = false;

    private bool authChecked = false;

    protected override async Task OnInitializedAsync()
    {
        // Skip auth check in OnInitialized - will be done in OnAfterRender
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !authChecked)
        {
            authChecked = true;
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated != true)
            {
                Navigation.NavigateTo("/login");
                return;
            }
            await LoadData();
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        try
        {
            isLoading = true;
            await Task.WhenAll(
                LoadAppointments(),
                LoadCustomers(),
                LoadServices()
            );
            ApplyFilters();
        }
        catch (Exception ex)
        {
            await SafeShowToast("Hata!", "Veriler yüklenirken bir hata oluştu.", "danger");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadAppointments()
    {
        appointments = await AppointmentService.GetAllAppointmentsAsync();
    }

    private async Task LoadCustomers()
    {
        customers = await CustomerService.GetActiveCustomersAsync();
    }

    private async Task LoadServices()
    {
        services = await ServiceTypeService.GetAllServiceTypesAsync();
        services = services.Where(s => s.IsActive).ToList();
    }

    private void ApplyFilters()
    {
        var query = appointments.AsQueryable();

        // Search filter
        if (!string.IsNullOrEmpty(searchTerm))
        {
            query = query.Where(a => 
                a.CustomerName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                a.ServiceTypeName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (a.Notes != null && a.Notes.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            );
        }

        // Status filter
        if (!string.IsNullOrEmpty(selectedStatus))
        {
            query = query.Where(a => a.Status == selectedStatus);
        }

        // Date filter
        var today = DateTime.Today;
        switch (viewMode)
        {
            case "today":
                query = query.Where(a => a.AppointmentDate.Date == today);
                break;
            case "week":
                // Get Monday as start of week
                int daysToSubtract = ((int)today.DayOfWeek == 0) ? 6 : ((int)today.DayOfWeek - 1);
                var startOfWeek = today.AddDays(-daysToSubtract);
                var endOfWeek = startOfWeek.AddDays(7);
                query = query.Where(a => a.AppointmentDate.Date >= startOfWeek && a.AppointmentDate.Date < endOfWeek);
                break;
            case "all":
                // Tüm randevuları göster (filtreleme yok)
                break;
        }

        filteredAppointments = query.OrderBy(a => a.AppointmentDate).ToList();
    }

    private async Task OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        ApplyFilters();
        await Task.CompletedTask;
    }

    private async Task OnStatusChanged(ChangeEventArgs e)
    {
        selectedStatus = e.Value?.ToString() ?? "";
        ApplyFilters();
        await Task.CompletedTask;
    }

    private async Task SetViewMode(string mode)
    {
        viewMode = mode;
        ApplyFilters();
        await Task.CompletedTask;
    }

    private async Task OpenAddAppointmentModal()
    {
        isEditMode = false;
        
        // Akıllı varsayılan saat önerisi
        var currentTime = DateTime.Now;
        var suggestedTime = currentTime.AddMinutes(30 - (currentTime.Minute % 30)); // En yakın 30 dakikalık dilime yuvarla
        
        // Eğer geçmiş saatse, bir sonraki gün için saat 09:00 öner
        if (suggestedTime.Date == DateTime.Today && suggestedTime.Hour < DateTime.Now.Hour)
        {
            suggestedTime = DateTime.Today.AddDays(1).AddHours(9);
        }
        
        // Eğer iş saatleri dışındaysa, ertesi gün 09:00 öner
        if (suggestedTime.Hour < 8 || suggestedTime.Hour >= 18)
        {
            if (suggestedTime.Hour >= 18)
                suggestedTime = suggestedTime.Date.AddDays(1).AddHours(9);
            else
                suggestedTime = suggestedTime.Date.AddHours(9);
        }
        
        appointmentModel = new AppointmentCreateRequest 
        { 
            CustomerId = 0,
            ServiceTypeId = 0,
            AppointmentDate = suggestedTime.Date,
            AppointmentTimeString = suggestedTime.ToString("HH:mm"),
            Duration = 60,
            Price = 0,
            Status = "Scheduled",
            SessionsTotal = 1
        };
        
        appointmentDateValue = suggestedTime.Date;
        showAppointmentModal = true;
        
        StateHasChanged();
    }

    private void CloseAppointmentModal()
    {
        showAppointmentModal = false;
        isEditMode = false;
        appointmentModel = new AppointmentCreateRequest();
    }

    private void OnServiceSelected(int serviceId)
    {
        appointmentModel.ServiceTypeId = serviceId;
        if (serviceId > 0)
        {
            var selectedService = services.FirstOrDefault(s => s.Id == serviceId);
            if (selectedService != null)
            {
                appointmentModel.Duration = selectedService.DurationMinutes;
                appointmentModel.Price = selectedService.Price;
            }
        }
    }

    private async Task OpenAppointmentDetailsModal(int appointmentId)
    {
        try
        {
            selectedAppointmentDetails = appointments.FirstOrDefault(a => a.Id == appointmentId);
            if (selectedAppointmentDetails != null)
            {
                showAppointmentDetailsModal = true;
                StateHasChanged();
            }
            else
            {
                await SafeShowToast("Hata!", "Randevu detayları yüklenemedi.", "danger");
            }
        }
        catch (Exception ex)
        {
            await SafeShowToast( "Hata!", "Randevu detayları yüklenirken bir hata oluştu.", "danger");
        }
    }

    private void CloseAppointmentDetailsModal()
    {
        showAppointmentDetailsModal = false;
        selectedAppointmentDetails = null;
    }

    private async Task OpenEditAppointmentModal(AppointmentModel appointment)
    {
        try
        {
            if (appointment == null)
            {
                await SafeShowToast( "Hata!", "Randevu bilgisi bulunamadı.", "danger");
                return;
            }

            // Close details modal if open
            showAppointmentDetailsModal = false;
            
            // Set edit mode and model
            isEditMode = true;
            selectedAppointmentId = appointment.Id;
            appointmentModel = new AppointmentCreateRequest
            {
                Id = appointment.Id,
                CustomerId = appointment.CustomerId,
                ServiceTypeId = appointment.ServiceTypeId,
                AppointmentDate = appointment.AppointmentDate.Date,
                AppointmentTimeString = appointment.AppointmentDate.ToString("HH:mm"),
                Duration = appointment.Duration,
                Price = appointment.ServicePrice,
                DiscountAmount = appointment.DiscountAmount,
                Status = appointment.Status,
                Notes = appointment.Notes ?? string.Empty
            };
            
            appointmentDateValue = appointment.AppointmentDate.Date;
            
            // Show edit modal
            showAppointmentModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await SafeShowToast( "Hata!", "Randevu düzenleme sırasında bir hata oluştu.", "danger");
        }
    }

    private async Task SaveAppointment()
    {
        try
        {
            isSaving = true;
            
            // Combine date and time
            appointmentModel.AppointmentDate = appointmentDateValue;
            var fullDateTime = appointmentModel.GetFullAppointmentDateTime();
            
            if (isEditMode)
            {
                var updateModel = new UpdateAppointmentModel
                {
                    CustomerId = appointmentModel.CustomerId,
                    ServiceTypeId = appointmentModel.ServiceTypeId,
                    AppointmentDate = fullDateTime,
                    Status = appointmentModel.Status,
                    DiscountAmount = appointmentModel.DiscountAmount,
                    Notes = appointmentModel.Notes
                };
                
                var success = await AppointmentService.UpdateAppointmentAsync(selectedAppointmentId, updateModel);
                if (success)
                {
                    await SafeShowToast( "Başarılı!", "Randevu başarıyla güncellendi.", "success");
                    showAppointmentModal = false;
                    isEditMode = false;
                    await LoadAppointments();
                    ApplyFilters();
                }
                else
                {
                    await SafeShowToast( "Hata!", "Randevu güncellenirken bir hata oluştu.", "danger");
                }
            }
            else
            {
                var createModel = new CreateAppointmentModel
                {
                    CustomerId = appointmentModel.CustomerId,
                    ServiceTypeId = appointmentModel.ServiceTypeId,
                    UserId = 1, // Default user ID
                    AppointmentDate = fullDateTime,
                    DiscountAmount = appointmentModel.DiscountAmount,
                    SessionsTotal = appointmentModel.SessionsTotal,
                    Notes = appointmentModel.Notes
                };
                
                var newAppointment = await AppointmentService.CreateAppointmentAsync(createModel);
                if (newAppointment != null)
                {
                    await SafeShowToast( "Başarılı!", "Randevu başarıyla eklendi.", "success");
                    showAppointmentModal = false;
                    isEditMode = false;
                    appointmentModel = new AppointmentCreateRequest();
                    await LoadAppointments();
                    ApplyFilters();
                }
                else
                {
                    await SafeShowToast( "Hata!", "Randevu eklenirken bir hata oluştu.", "danger");
                }
            }
        }
        catch (Exception)
        {
            await SafeShowToast( "Hata!", "İşlem sırasında bir hata oluştu.", "danger");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task UpdateAppointmentStatus(int appointmentId, string newStatus)
    {
        try
        {
            var appointment = appointments.FirstOrDefault(a => a.Id == appointmentId);
            if (appointment != null)
            {
                var updateModel = new UpdateAppointmentModel
                {
                    CustomerId = appointment.CustomerId,
                    ServiceTypeId = appointment.ServiceTypeId,
                    AppointmentDate = appointment.AppointmentDate,
                    Status = newStatus,
                    DiscountAmount = appointment.DiscountAmount,
                    Notes = appointment.Notes
                };

                var success = await AppointmentService.UpdateAppointmentAsync(appointmentId, updateModel);
                if (success)
                {
                    await SafeShowToast( "Başarılı!", 
                        $"Randevu durumu güncellendi: {GetStatusText(newStatus)}", "success");
                    await LoadAppointments();
                    ApplyFilters();
                    
                    // Update details if open
                    if (showAppointmentDetailsModal && selectedAppointmentDetails?.Id == appointmentId)
                    {
                        selectedAppointmentDetails.Status = newStatus;
                        StateHasChanged();
                    }
                }
                else
                {
                    await SafeShowToast( "Hata!", "Durum güncellenirken bir hata oluştu.", "danger");
                }
            }
        }
        catch (Exception)
        {
            await SafeShowToast( "Hata!", "İşlem sırasında bir hata oluştu.", "danger");
        }
    }

    private string GetAppointmentStatusColor(string status)
    {
        return status switch
        {
            "Scheduled" => "primary",
            "Completed" => "success",
            "Cancelled" => "danger",
            "NoShow" => "secondary",
            _ => "secondary"
        };
    }

    private string GetStatusText(string status)
    {
        return status switch
        {
            "Scheduled" => "Planlanmış",
            "Completed" => "Tamamlanmış",
            "Cancelled" => "İptal Edilmiş",
            "NoShow" => "Gelmedi",
            _ => status
        };
    }

    private List<string> GetSuggestedTimeSlots()
    {
        var timeSlots = new List<string>();
        
        // İş saatleri: 09:00 - 18:00 arası, 30 dakika aralıklarla
        for (int hour = 9; hour < 18; hour++)
        {
            timeSlots.Add($"{hour:D2}:00");
            timeSlots.Add($"{hour:D2}:30");
        }
        
        return timeSlots;
    }

    private void SetQuickTime(string timeSlot)
    {
        appointmentModel.AppointmentTimeString = timeSlot;
        StateHasChanged();
    }

    private async Task SafeShowToast(string title, string message, string type)
    {
        try
        {
            if (JSRuntime != null)
            {
                await JSRuntime.InvokeVoidAsync("showToast", title, message, type);
            }
        }
        catch (JSDisconnectedException)
        {
            // Circuit is disconnected, ignore
        }
        catch (InvalidOperationException ex) when (ex.Message.Contains("interop"))
        {
            // Interop is not available, ignore
            Console.WriteLine($"Toast interop not available: {ex.Message}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Toast error: {ex.Message}");
        }
    }

    public void Dispose()
    {
        // Clean up any resources
    }
}